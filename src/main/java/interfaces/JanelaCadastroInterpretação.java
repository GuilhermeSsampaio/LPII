package interfaces;

import controle.ControladorCadastroInterpretaçõesRepertório;
import entidade.PeçaMusical;
import entidade.Repertório;
import entidade.Interpretação;
import javax.swing.DefaultComboBoxModel;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class JanelaCadastroInterpretação extends javax.swing.JFrame {

    ControladorCadastroInterpretaçõesRepertório controlador;
    JanelaCadastroRepertórios janela_mãe;
    int sequencial_repertório;
    PeçaMusical[] peças_musicais_cadastradas;
    DefaultListModel modelo_lista_interpretações;

    public JanelaCadastroInterpretação(ControladorCadastroInterpretaçõesRepertório controlador,
            JanelaCadastroRepertórios janela_mãe, int sequencial_repertório) {
        this.controlador = controlador;
        this.janela_mãe = janela_mãe;
        this.sequencial_repertório = sequencial_repertório;
        peças_musicais_cadastradas = PeçaMusical.getVisões();
        initComponents();
        atualizarNomeRepertório();
        atualizarListaInterpretaçõesRepertório();
    }

    private void atualizarNomeRepertório() {
        Repertório repertório = Repertório.buscarRepertório(sequencial_repertório);
        repertórioLabel.setText("Repertório: " + repertório.getNome());

    }

    private void atualizarListaInterpretaçõesRepertório() {
        modelo_lista_interpretações = (DefaultListModel) peças_musicais_repertorioList.getModel();
        Interpretação[] interpretações_repertório = Interpretação.buscarInterpretaçõesRepertório(sequencial_repertório);
        for (Interpretação interpretação : interpretações_repertório) {
            modelo_lista_interpretações.addElement(interpretação);
        }
    }

    private void informarErro(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Erro", JOptionPane.ERROR_MESSAGE);
    }

    private void informarSucesso(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        peças_musicais_cadastradasLabel = new javax.swing.JLabel();
        peças_musicais_repertorioLabel = new javax.swing.JLabel();
        peças_musicais_repertorioScrollPane = new javax.swing.JScrollPane();
        peças_musicais_repertorioList = new javax.swing.JList();
        peças_musicais_cadastradasComboBox = new javax.swing.JComboBox();
        botoesPanel = new javax.swing.JPanel();
        inserirButton = new javax.swing.JButton();
        removerButton = new javax.swing.JButton();
        repertórioLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastrar Interpretações");
        setMinimumSize(new java.awt.Dimension(550, 350));
        setPreferredSize(new java.awt.Dimension(500, 350));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                atualizarJanelaCadastroRepertórios(evt);
            }
        });

        peças_musicais_cadastradasLabel.setText("Peças musicais cadastradas:");

        peças_musicais_repertorioLabel.setText("Peças musicais no repertório:");

        peças_musicais_repertorioList.setModel(new DefaultListModel());
        peças_musicais_repertorioList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        peças_musicais_repertorioScrollPane.setViewportView(peças_musicais_repertorioList);

        peças_musicais_cadastradasComboBox.setModel(new DefaultComboBoxModel(peças_musicais_cadastradas));

        inserirButton.setText("Inserir");
        inserirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirInterpretação(evt);
            }
        });

        removerButton.setText("Remover");
        removerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerInterpretação(evt);
            }
        });

        javax.swing.GroupLayout botoesPanelLayout = new javax.swing.GroupLayout(botoesPanel);
        botoesPanel.setLayout(botoesPanelLayout);
        botoesPanelLayout.setHorizontalGroup(
            botoesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botoesPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(inserirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addComponent(removerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        botoesPanelLayout.setVerticalGroup(
            botoesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botoesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(botoesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inserirButton)
                    .addComponent(removerButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botoesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(37, 37, 37))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(peças_musicais_cadastradasLabel)
                            .addGap(8, 8, 8)
                            .addComponent(peças_musicais_cadastradasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(peças_musicais_repertorioLabel)
                            .addGap(12, 12, 12)
                            .addComponent(peças_musicais_repertorioScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(repertórioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(repertórioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peças_musicais_cadastradasLabel)
                    .addComponent(peças_musicais_cadastradasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peças_musicais_repertorioLabel)
                    .addComponent(peças_musicais_repertorioScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(botoesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void atualizarJanelaCadastroRepertórios(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_atualizarJanelaCadastroRepertórios
        // TODO add your handling code here:
        janela_mãe.atualizarListaInterpretaçõesRepertório(sequencial_repertório);
    }//GEN-LAST:event_atualizarJanelaCadastroRepertórios

    private void inserirInterpretação(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_inserirInterpretação
        PeçaMusical visão_peça_musical = (PeçaMusical) peças_musicais_cadastradasComboBox.getSelectedItem();
        String mensagem_erro = null;
        Interpretação interpretação = null;
        if (visão_peça_musical != null) {
            Repertório visão_repertório = Repertório.buscarRepertório(sequencial_repertório);
            interpretação = new Interpretação(0, visão_repertório, visão_peça_musical);
            mensagem_erro = controlador.inserirInterpretação(interpretação);
            if (mensagem_erro == null) {
                int sequencial = Interpretação.últimoSequencial();
                interpretação.setSequencial(sequencial);
                modelo_lista_interpretações.addElement(interpretação);
            } else {
                informarErro(mensagem_erro);
            }
        }

    }

    // GEN-LAST:event_inserirInterpretação
    private void removerInterpretação(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removerInterpretação
        Interpretação visão = (Interpretação) peças_musicais_repertorioList.getSelectedValue();
        if (visão != null) {
            int sequencial = visão.getSequencial(); // Certifique-se de obter o sequencial da interpretação
            String mensagem_erro = controlador.removerInterpretação(sequencial);
            if (mensagem_erro == null) {
                modelo_lista_interpretações.removeElement(visão);
            } else {
                informarErro(mensagem_erro);
            }
        } else {
            informarErro("Nenhuma peça foi selecionada");
        }

    }// GEN-LAST:event_removerInterpretação

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel botoesPanel;
    private javax.swing.JButton inserirButton;
    private javax.swing.JComboBox peças_musicais_cadastradasComboBox;
    private javax.swing.JLabel peças_musicais_cadastradasLabel;
    private javax.swing.JLabel peças_musicais_repertorioLabel;
    private javax.swing.JList peças_musicais_repertorioList;
    private javax.swing.JScrollPane peças_musicais_repertorioScrollPane;
    private javax.swing.JButton removerButton;
    private javax.swing.JLabel repertórioLabel;
    // End of variables declaration//GEN-END:variables
}
