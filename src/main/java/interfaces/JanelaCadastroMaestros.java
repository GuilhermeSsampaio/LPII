package interfaces;

import controle.ControladorCadastroMaestros;
import entidade.Maestro;
import entidade.Maestro.Estilo;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

public class JanelaCadastroMaestros extends javax.swing.JFrame {

     public static Estilo converteStringParaGênero(String genero_str) {
        switch (genero_str) {
            case "expressivo":
                return Estilo.expressivo;
            case "dinâmico":
                return Estilo.dinâmico;
            case "leve":
                return Estilo.leve;
            case "elegante":
                return Estilo.elegante;
            default:
                return null;
        }
    }
    ControladorCadastroMaestros controlador;
    Maestro[] maestros_cadastrados;

    public JanelaCadastroMaestros(ControladorCadastroMaestros controlador) {
        this.controlador = controlador;
        maestros_cadastrados = Maestro.getVisões();
        initComponents();
        limparCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private Maestro obterMaestroInformado() {
        String nome = nomeTextField.getText();
        if (nome.isEmpty()) {
            return null;
        }
        String anos_experiencia_str = anos_experienciaTextField.getText();
        if (anos_experiencia_str.isEmpty()) {
            return null;
        }
        int anos_experiencia = Integer.parseInt(anos_experiencia_str);
        Estilo estilo = null;
        if(estiloButtonGroup.getSelection() != null){
            estilo = Estilo.values()[estiloButtonGroup.getSelection().getMnemonic()];
        }else{
            return null;
        }
        boolean estrangeiro = estrangeiroCheckBox.isSelected();
        return new Maestro(nome, anos_experiencia, estilo, estrangeiro);
    }

    private void limparCampos() {
        nomeTextField.setText("");
        anos_experienciaTextField.setText("");
        estiloButtonGroup.clearSelection();
        estrangeiroCheckBox.setSelected(false);
    }

    private void selecionarEstiloRadioButton(int índice_estilo_regência) {
        switch (índice_estilo_regência) {
            case 0:
                expressivoRadioButton.setSelected(true);
                break;
            case 1:
                dinâmicoRadioButton.setSelected(true);
                break;
            case 2:
                leveRadioButton.setSelected(true);
                break;
            case 3:
                eleganteRadioButton.setSelected(true);
                break;
        }
    }

    private void informarErro(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Erro", JOptionPane.ERROR_MESSAGE);
    }

    private void informarSucesso(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    }

    private Maestro getVisãoAlterada(String nome) {
        for (Maestro visão : maestros_cadastrados) {
            if (visão.getNome().equals(nome)) {
                return visão;
            }
        }
        return null;
    }

    private void atualizarComboBox() {
        maestros_cadastrados = Maestro.getVisões();
        maestros_cadastradosComboBox.setModel(new DefaultComboBoxModel(maestros_cadastrados));
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        estiloButtonGroup = new javax.swing.ButtonGroup();
        nomeLabel = new javax.swing.JLabel();
        nomeTextField = new javax.swing.JTextField();
        maestros_cadastradosLabel = new javax.swing.JLabel();
        maestros_cadastradosComboBox = new javax.swing.JComboBox();
        anos_experienciaLabel = new javax.swing.JLabel();
        anos_experienciaTextField = new javax.swing.JTextField();
        estilo_Label = new javax.swing.JLabel();
        comandosPanel = new javax.swing.JPanel();
        inserirButton = new javax.swing.JButton();
        consultarButton = new javax.swing.JButton();
        alterarButton = new javax.swing.JButton();
        removerButton = new javax.swing.JButton();
        LimparButton = new javax.swing.JButton();
        estrangeiroCheckBox = new javax.swing.JCheckBox();
        EstilosPanel = new javax.swing.JPanel();
        expressivoRadioButton = new javax.swing.JRadioButton();
        dinâmicoRadioButton = new javax.swing.JRadioButton();
        leveRadioButton = new javax.swing.JRadioButton();
        eleganteRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastrar Maestros");

        nomeLabel.setText("Nome: ");

        nomeTextField.setColumns(50);
        nomeTextField.setPreferredSize(new java.awt.Dimension(556, 22));

        maestros_cadastradosLabel.setText("Maestros cadastrados:");

        maestros_cadastradosComboBox.setModel(new DefaultComboBoxModel(maestros_cadastrados));

        anos_experienciaLabel.setText("Anos de experiência:");

        anos_experienciaTextField.setColumns(50);
        anos_experienciaTextField.setPreferredSize(new java.awt.Dimension(556, 22));

        estilo_Label.setText("Estilo:");

        inserirButton.setText("Inserir");
        inserirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirMaestro(evt);
            }
        });
        comandosPanel.add(inserirButton);

        consultarButton.setText("Consultar");
        consultarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarMaestro(evt);
            }
        });
        comandosPanel.add(consultarButton);

        alterarButton.setText("Alterar");
        alterarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarMaestro(evt);
            }
        });
        comandosPanel.add(alterarButton);

        removerButton.setText("Remover");
        removerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerMaestro(evt);
            }
        });
        comandosPanel.add(removerButton);

        LimparButton.setText("Limpar");
        LimparButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparCampos(evt);
            }
        });
        comandosPanel.add(LimparButton);

        estrangeiroCheckBox.setText("Estrangeiro: ");
        estrangeiroCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        estiloButtonGroup.add(expressivoRadioButton);
        expressivoRadioButton.setText("expressivo");
        expressivoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expressivoRadioButtonActionPerformed(evt);
            }
        });
        EstilosPanel.add(expressivoRadioButton);

        estiloButtonGroup.add(dinâmicoRadioButton);
        dinâmicoRadioButton.setMnemonic('\u0001');
        dinâmicoRadioButton.setText("dinâmico");
        EstilosPanel.add(dinâmicoRadioButton);

        estiloButtonGroup.add(leveRadioButton);
        leveRadioButton.setMnemonic('\u0002');
        leveRadioButton.setText("leve");
        EstilosPanel.add(leveRadioButton);

        estiloButtonGroup.add(eleganteRadioButton);
        eleganteRadioButton.setMnemonic('\u0003');
        eleganteRadioButton.setText("elegante");
        EstilosPanel.add(eleganteRadioButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(maestros_cadastradosLabel)
                        .addGap(6, 6, 6)
                        .addComponent(maestros_cadastradosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(nomeLabel)
                        .addGap(12, 12, 12)
                        .addComponent(nomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(estilo_Label)
                        .addGap(6, 6, 6)
                        .addComponent(EstilosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(anos_experienciaLabel)
                        .addGap(12, 12, 12)
                        .addComponent(anos_experienciaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(estrangeiroCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(comandosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maestros_cadastradosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(maestros_cadastradosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(nomeLabel))
                    .addComponent(nomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(estilo_Label))
                    .addComponent(EstilosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(anos_experienciaLabel))
                    .addComponent(anos_experienciaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(estrangeiroCheckBox)
                .addGap(28, 28, 28)
                .addComponent(comandosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void consultarMaestro(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarMaestro

        Maestro visão = (Maestro) maestros_cadastradosComboBox.getSelectedItem();
        Maestro maestro = null;
        String mensagem_erro = null;
        if (visão != null) {
            maestro = Maestro.buscarMaestro(visão.getNome());
            if (maestro == null) {
                mensagem_erro = "Maestro não encontrado";
            }
        } else {
            mensagem_erro = "Nenhum maestro selecionado";
        }

        if (mensagem_erro == null) {
            nomeTextField.setText(maestro.getNome());
            anos_experienciaTextField.setText(Integer.toString(maestro.getAnos_experiencia()));
            selecionarEstiloRadioButton(maestro.getEstilo().ordinal());
            estrangeiroCheckBox.setSelected(maestro.isEstrangeiro());
        } else
            informarErro(mensagem_erro);
    }//GEN-LAST:event_consultarMaestro

    private void limparCampos(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparCampos
        // TODO add your handling code here:
        limparCampos();
    }//GEN-LAST:event_limparCampos

    private void inserirMaestro(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirMaestro
        // TODO add your handling code here:
        Maestro maestro = obterMaestroInformado();
        //System.out.println("maestro: " + maestro.getNome());
        String mensagem_erro = null;
        if (maestro != null) {
            mensagem_erro = controlador.inserirMaestro(maestro);
            //informarSucesso("Maestro inserido com sucesso");
        } else {
            mensagem_erro = "Algum atributo do maestro não foi informado";
        }

        if (mensagem_erro == null) {
            Maestro visão = maestro.getVisão();
            maestros_cadastradosComboBox.addItem(visão);
            maestros_cadastradosComboBox.setSelectedItem(visão);
        } else
            informarErro(mensagem_erro);
    }//GEN-LAST:event_inserirMaestro

    private void alterarMaestro(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarMaestro
        // TODO add your handling code here:
        Maestro maestro = obterMaestroInformado();
        String mensagem_erro = null;
        if (maestro != null) {
            mensagem_erro = controlador.alterarMaestro(maestro);
            //informarSucesso("Maestro alterado com sucesso");
            atualizarComboBox();
        } else {
            mensagem_erro = "Algum atributo do maestro não foi informado";
        }

        if (mensagem_erro == null) {
            Maestro visão = getVisãoAlterada(maestro.getNome());
            if (visão != null) {
                visão.setAnosExperiencia(maestro.getAnos_experiencia());
                maestros_cadastradosComboBox.updateUI();
                maestros_cadastradosComboBox.setSelectedItem(visão);
            }
        } else
            informarErro(mensagem_erro);
    }//GEN-LAST:event_alterarMaestro

    private void removerMaestro(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerMaestro
        // TODO add your handling code here:
        Maestro visão = (Maestro) maestros_cadastradosComboBox.getSelectedItem();
        String mensagem_erro = null;
        if (visão != null) {
            mensagem_erro = controlador.removerMaestro(visão.getNome());
            //informarSucesso("Maestro removido com sucesso");
        } else {
            mensagem_erro = "Nenhum maestro selecionado";
        }

        if (mensagem_erro == null) {
            maestros_cadastradosComboBox.removeItem(visão);
            limparCampos();
        } else
            informarErro(mensagem_erro);
    }//GEN-LAST:event_removerMaestro

    private void expressivoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expressivoRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expressivoRadioButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel EstilosPanel;
    private javax.swing.JButton LimparButton;
    private javax.swing.JButton alterarButton;
    private javax.swing.JLabel anos_experienciaLabel;
    private javax.swing.JTextField anos_experienciaTextField;
    private javax.swing.JPanel comandosPanel;
    private javax.swing.JButton consultarButton;
    private javax.swing.JRadioButton dinâmicoRadioButton;
    private javax.swing.JRadioButton eleganteRadioButton;
    private javax.swing.ButtonGroup estiloButtonGroup;
    private javax.swing.JLabel estilo_Label;
    private javax.swing.JCheckBox estrangeiroCheckBox;
    private javax.swing.JRadioButton expressivoRadioButton;
    private javax.swing.JButton inserirButton;
    private javax.swing.JRadioButton leveRadioButton;
    private javax.swing.JComboBox maestros_cadastradosComboBox;
    private javax.swing.JLabel maestros_cadastradosLabel;
    private javax.swing.JLabel nomeLabel;
    private javax.swing.JTextField nomeTextField;
    private javax.swing.JButton removerButton;
    // End of variables declaration//GEN-END:variables

}
