package interfaces;

import controle.ControladorCadastroInterpretaçõesRepertório;
import javax.swing.DefaultListModel;

import controle.ControladorCadastroRepertórios;
import entidade.Interpretação;
import entidade.Repertório;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

import java.sql.Timestamp;
import java.sql.Date;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
// import com.google.protobuf.TextFormat.ParseException;
import java.util.Calendar;

public class JanelaCadastroRepertórios extends javax.swing.JFrame {

    ControladorCadastroRepertórios controlador;
    Repertório[] repertórios_cadastrados;
    DefaultListModel modelo_interpretações_repertório;

    public JanelaCadastroRepertórios(ControladorCadastroRepertórios controlador) {
        this.controlador = controlador;
        repertórios_cadastrados = Repertório.getVisões();
        initComponents();
        modelo_interpretações_repertório = (DefaultListModel) peças_musicaisList.getModel();
        limparCampos();
    }

    private void limparCampos() {
        sequencialTextField.setText("");
        nomeTextField.setText("");
        data_montagemTextField.setText("");
        descriçãoTextArea.setText("");
        modelo_interpretações_repertório.clear();
    }

    private Repertório obtemRepertórioInformado() {
        String sequencial_str = sequencialTextField.getText();
        int sequencial = 0;
        if (!sequencial_str.isEmpty()) {
            sequencial = Integer.parseInt(sequencial_str);
        }
        String nome = nomeTextField.getText();
        if (nome.isEmpty()) {
            return null;
        }
        Timestamp data_montagem = new Timestamp(System.currentTimeMillis());
        String descrição = descriçãoTextArea.getText();
        if (descrição.isEmpty()) {
            return null;
        }
        return new Repertório(sequencial, nome, data_montagem, descrição);
    }

    private void informarErro(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Erro", JOptionPane.ERROR_MESSAGE);
    }

    private void informarSucesso(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    }

    private Repertório getVisãoAlterada(int sequencial) {
        for (Repertório visão : repertórios_cadastrados) {
            if (visão.getSequencial() == sequencial) {
                return visão;
            }
        }
        return null;
    }

    public void atualizarListaInterpretaçõesRepertório(int sequencial) {
        modelo_interpretações_repertório.clear();
        Interpretação[] interpretações_repertório = Interpretação.buscarInterpretaçõesRepertório(sequencial);
        for (Interpretação interpretação : interpretações_repertório) {
            modelo_interpretações_repertório.addElement(interpretação);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        repertóriosCadastrados = new javax.swing.JLabel();
        repertórios_cadastradosComboBox = new javax.swing.JComboBox();
        sequencialLabel = new javax.swing.JLabel();
        sequencialTextField = new javax.swing.JTextField();
        nomeLabel = new javax.swing.JLabel();
        nomeTextField = new javax.swing.JTextField();
        data_montagemLabel = new javax.swing.JLabel();
        data_montagemTextField = new javax.swing.JTextField();
        descriçãoLabel = new javax.swing.JLabel();
        peças_musicaisLabel = new javax.swing.JLabel();
        comandosPanel = new javax.swing.JPanel();
        inserirButton = new javax.swing.JButton();
        consultarButton = new javax.swing.JButton();
        alterarButton = new javax.swing.JButton();
        removerButton = new javax.swing.JButton();
        interpretaçõesButton = new javax.swing.JButton();
        limparButton = new javax.swing.JButton();
        peças_musicaisScrollPane = new javax.swing.JScrollPane();
        peças_musicaisList = new javax.swing.JList();
        descriçãoScrollPane = new javax.swing.JScrollPane();
        descriçãoTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastrar Repertórios");

        repertóriosCadastrados.setText("Repertórios:");

        repertórios_cadastradosComboBox.setModel(new DefaultComboBoxModel(repertórios_cadastrados));

        sequencialLabel.setText("Identificador Sequencial:");

        sequencialTextField.setEditable(false);
        sequencialTextField.setColumns(50);

        nomeLabel.setText("Nome:");

        nomeTextField.setColumns(50);

        data_montagemLabel.setText("Data de montagem:");

        data_montagemTextField.setColumns(50);
        data_montagemTextField.setToolTipText("");

        descriçãoLabel.setText("Descrição:");

        peças_musicaisLabel.setText("Peças musicais no repertório:");

        inserirButton.setText("Inserir");
        inserirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirRepertório(evt);
            }
        });
        comandosPanel.add(inserirButton);

        consultarButton.setText("Consultar");
        consultarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarRepertório(evt);
            }
        });
        comandosPanel.add(consultarButton);

        alterarButton.setText("Alterar");
        alterarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarRepertório(evt);
            }
        });
        comandosPanel.add(alterarButton);

        removerButton.setText("Remover");
        removerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerRepertório(evt);
            }
        });
        comandosPanel.add(removerButton);

        interpretaçõesButton.setText("Interpretações");
        interpretaçõesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarInterpretações(evt);
            }
        });
        comandosPanel.add(interpretaçõesButton);

        limparButton.setText("Limpar");
        limparButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparCampos(evt);
            }
        });
        comandosPanel.add(limparButton);

        peças_musicaisList.setModel(new DefaultListModel());
        peças_musicaisList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        peças_musicaisList.setVisibleRowCount(4);
        peças_musicaisScrollPane.setViewportView(peças_musicaisList);

        descriçãoTextArea.setColumns(20);
        descriçãoTextArea.setRows(5);
        descriçãoScrollPane.setViewportView(descriçãoTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peças_musicaisLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(comandosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(repertóriosCadastrados)
                        .addGap(12, 12, 12)
                        .addComponent(repertórios_cadastradosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(sequencialLabel)
                        .addGap(12, 12, 12)
                        .addComponent(sequencialTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(nomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(nomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(descriçãoLabel)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(peças_musicaisScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descriçãoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(data_montagemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(data_montagemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(repertóriosCadastrados))
                    .addComponent(repertórios_cadastradosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(sequencialLabel))
                    .addComponent(sequencialTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(nomeLabel))
                    .addComponent(nomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(data_montagemLabel))
                    .addComponent(data_montagemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriçãoLabel)
                    .addComponent(descriçãoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(peças_musicaisLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(peças_musicaisScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(comandosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cadastrarInterpretações(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarInterpretações
        // TODO add your handling code here:
        String sequencial_str = sequencialTextField.getText();
        int sequencial = 0;
        if (!sequencial_str.isEmpty()) {
            sequencial = Integer.parseInt(sequencial_str);
        }
        if (sequencial > 0)
            new ControladorCadastroInterpretaçõesRepertório(this, sequencial);
        else
            informarErro("Nenhum repertório selecionado");
    }//GEN-LAST:event_cadastrarInterpretações

    private void limparCampos(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparCampos
        // TODO add your handling code here:
        limparCampos();
    }//GEN-LAST:event_limparCampos

    private void peças_musicaisButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_peças_musicaisButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_peças_musicaisButtonActionPerformed

    private void inserirRepertório(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_inserirRepertório
        Repertório repertório = obtemRepertórioInformado();
        String mensagem_erro = null;
        if (repertório != null) {
            mensagem_erro = controlador.inserirRepertório(repertório);
            //informarSucesso("Repertório inserido com sucesso");
        } else {
            mensagem_erro = "Preencha todos os campos";
        }
        if (mensagem_erro == null) {
            int sequencial = Repertório.últimoSequencial();
            repertório.setSequencial(sequencial);
            Repertório visão = repertório.getVisão();
            repertórios_cadastradosComboBox.addItem(visão);
            repertórios_cadastradosComboBox.setSelectedItem(visão);
            sequencialTextField.setText("" + sequencial);
        } else {
            informarErro(mensagem_erro);
        }
    }// GEN-LAST:event_inserirRepertório

    private void consultarRepertório(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_consultarRepertório
        Repertório visão = (Repertório) repertórios_cadastradosComboBox.getSelectedItem();
        Repertório repertório = null;
        String mensagem_erro = null;
        int sequencial = -1;
        if (visão != null) {
            sequencial = visão.getSequencial();
            repertório = Repertório.buscarRepertório(sequencial);
            if (repertório == null) {
                mensagem_erro = "Repertório não encontrado";
            }
        } else {
            mensagem_erro = "Nenhum repertório selecionado";
        }
        if (mensagem_erro == null) {
            sequencialTextField.setText(sequencial + "");
            nomeTextField.setText(repertório.getNome());
            data_montagemTextField.setText(repertório.formatarDataHora(repertório.getData_montagem().toString()));
            descriçãoTextArea.setText(repertório.getDescrição());
            atualizarListaInterpretaçõesRepertório(sequencial);
        } else {
            informarErro(mensagem_erro);
        }

    }// GEN-LAST:event_consultarRepertório

    private void alterarRepertório(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_alterarRepertório
        Repertório repertório = obtemRepertórioInformado();
        String mensagem_erro = null;
        if (repertório != null) {
            mensagem_erro = controlador.alterarRepertório(repertório);
            //informarSucesso("Repertório alterado com sucesso");
        } else {
            mensagem_erro = "Preencha todos os campos";
        }
        if (mensagem_erro == null) {
            Repertório visão = getVisãoAlterada(repertório.getSequencial());
            if (visão != null) {
                visão.setNome(repertório.getNome());
            }
            repertórios_cadastradosComboBox.updateUI();
            repertórios_cadastradosComboBox.setSelectedItem(visão);
        } else {
            informarErro(mensagem_erro);
        }
    }// GEN-LAST:event_alterarRepertório

    private void removerRepertório(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removerRepertório
        Repertório visão = (Repertório) repertórios_cadastradosComboBox.getSelectedItem();
        String mensagem_erro = null;
        if (visão != null) {
            mensagem_erro = controlador.removerRepertório(visão.getSequencial());
            //informarSucesso("Repertório removido com sucesso");
        } else {
            mensagem_erro = "Nenhum repertório selecionado";
        }
        if (mensagem_erro == null) {
            repertórios_cadastradosComboBox.removeItem(visão);
            limparCampos();
        } else {
            informarErro(mensagem_erro);
        }
    }// GEN-LAST:event_removerRepertório

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alterarButton;
    private javax.swing.JPanel comandosPanel;
    private javax.swing.JButton consultarButton;
    private javax.swing.JLabel data_montagemLabel;
    private javax.swing.JTextField data_montagemTextField;
    private javax.swing.JLabel descriçãoLabel;
    private javax.swing.JScrollPane descriçãoScrollPane;
    private javax.swing.JTextArea descriçãoTextArea;
    private javax.swing.JButton inserirButton;
    private javax.swing.JButton interpretaçõesButton;
    private javax.swing.JButton limparButton;
    private javax.swing.JLabel nomeLabel;
    private javax.swing.JTextField nomeTextField;
    private javax.swing.JLabel peças_musicaisLabel;
    private javax.swing.JList peças_musicaisList;
    private javax.swing.JScrollPane peças_musicaisScrollPane;
    private javax.swing.JButton removerButton;
    private javax.swing.JLabel repertóriosCadastrados;
    private javax.swing.JComboBox repertórios_cadastradosComboBox;
    private javax.swing.JLabel sequencialLabel;
    private javax.swing.JTextField sequencialTextField;
    // End of variables declaration//GEN-END:variables
}
